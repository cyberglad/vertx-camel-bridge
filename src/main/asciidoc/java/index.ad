= Vert.x Camel Bridge
:toc: left

Apache Camel (http://camel.apache.org) is an open source Java framework that focuses on making integration easier
and more accessible to developers.

This bridge lets Vert.x applications interact with Camel endpoints:

* the application can send messages to Camel.
* the application can receive message from Camel.

The bridge relies on the Vert.x event bus and associate an event bus address to a Camel endpoint.

== Using vertx-camel-bridge

To use the Vert.x Camel Bridge, add the following dependency to the _dependencies_ section of your
build descriptor:

* Maven (in your `pom.xml`):

[source,xml,subs="+attributes"]
----
<dependency>
  <groupId>io.vertx</groupId>
  <artifactId>vertx-camel-bridge</artifactId>
  <version>3.3.0-SNAPSHOT</version>
</dependency>
----

* Gradle (in your `build.gradle` file):

[source,groovy,subs="+attributes"]
----
compile 'io.vertx:vertx-camel-bridge:3.3.0-SNAPSHOT'
----

== Bridge configuration

Before being used, the bridge needs to be configured and started:

[source,java]
----
CamelContext camel = new DefaultCamelContext();
CamelBridge.create(vertx,
    new CamelBridgeOptions(camel)
        .addInboundMapping(new InboundMapping().setUri("direct:stuff").setAddress("eventbus-address"))
        .addOutboundMapping(new OutboundMapping().setAddress("eventbus-address").setUri("stream:out"))
).start();
----

The bridge requires a `CamelContext`. It will find the endpoint from the context.

=== Inbound mapping

Inbound mapping associates a Camel endpoint to an event bus address. Messages received on this endpoint are
transformed to event bus messages.

[source,java]
----
Endpoint endpoint = camel.getEndpoint("direct:foo");

CamelBridge.create(vertx,
    new CamelBridgeOptions(camel)
        .addInboundMapping(new InboundMapping().setUri("direct:stuff").setAddress("eventbus-address"))
        .addInboundMapping(new InboundMapping().setEndpoint(endpoint).setAddress("eventbus-address"))
        .addInboundMapping(new InboundMapping().setEndpoint(endpoint).setAddress("eventbus-address")
            .setHeadersCopy(false))
        .addInboundMapping(new InboundMapping().setEndpoint(endpoint).setAddress("eventbus-address")
            .setPublish(true))
        .addInboundMapping(new InboundMapping().setEndpoint(endpoint).setAddress("eventbus-address")
            .setBodyType(String.class))
);
----

The snippet above shows different ways to configure an inbound mapping:

* you can configure the Camel endpoint either using the `Endpoint` object or its uri
* you can disables the header copy (Camel message headers are copied to the event bus message)
* you can uses `publish` instead of `send` to broadcast the message to all event bus consumers
* you can configures the type of the event bus message body. If not set it uses the Camel message payload. If
sets, it looks in the Camel context for a converter between the Camel message payload and the desired type.

_Note_: `org.fusesource.hawtbuf.Buffer` are automatically converted to `link:../../apidocs/io/vertx/core/buffer/Buffer.html[Buffer]`.

=== Outbound mapping

Outbound mapping associates an event bus address to a Camel endpoint. Messages received on this event bus address
are transformed to Camel messages and sent to the endpoint.

[source,java]
----
Endpoint endpoint = camel.getEndpoint("stream:out");

CamelBridge.create(vertx,
    new CamelBridgeOptions(camel)
        .addOutboundMapping(new OutboundMapping().setAddress("eventbus-address").setUri("stream:out"))
        .addOutboundMapping(new OutboundMapping().setAddress("eventbus-address").setEndpoint(endpoint))
        .addOutboundMapping(new OutboundMapping().setAddress("eventbus-address").setEndpoint(endpoint)
            .setHeadersCopy(false))
        .addOutboundMapping(new OutboundMapping().setAddress("eventbus-address").setEndpoint(endpoint))
);
----

The snippet above shows different ways to configure an outbound mapping.

You can connect your outbound mapping to a Camel route:

[source,java]
----
camel.addRoutes(new RouteBuilder() {
  @Override
  public void configure() throws Exception {
    from("direct:start")
        .transform(constant("OK"));
  }
});

CamelBridge bridge = CamelBridge.create(vertx, new CamelBridgeOptions(camel)
    .addOutboundMapping(new OutboundMapping().setAddress("test").setUri("direct:start")));

camel.start();
bridge.start();


vertx.eventBus().send("test", "hello", reply -> {
  // Reply from the route (here it will be "OK"
});
----

If when you send the message on the event bus you register a reply handler, it configures the Camel exchange to
expect a response (it uses the request-reply pattern of the EIP). The response is passed in the reply body. If the
route fails, you get a reply failure (recipient failure), with the message as cause:

[source,java]
----
camel.addRoutes(new RouteBuilder() {
  @Override
  public void configure() throws Exception {
    from("direct:my-route")
        .to("http://localhost:8080");
  }
});

CamelBridge bridge = CamelBridge.create(vertx, new CamelBridgeOptions(camel)
    .addOutboundMapping(new OutboundMapping().setAddress("camel-route").setUri("direct:my-route")));

camel.start();
bridge.start();

vertx.eventBus().send("camel-route", "hello", reply -> {
  if (reply.succeeded()) {
    Object theResponse = reply.result().body();
  } else {
    Throwable theCause = reply.cause();
  }
});
----

== Stopping the bridge

Don't forget to stop the bridge using the `stop` method.